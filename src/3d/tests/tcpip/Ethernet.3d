/*

  Specifying the format of Ethernet II frames, 
  as used in vxlan RFC 7348

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

   Outer Ethernet Header:
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |             Outer Destination MAC Address                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Outer Destination MAC Address | Outer Source MAC Address      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                Outer Source MAC Address                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |OptnlEthtype = C-Tag 802.1Q    | Outer.VLAN Tag Information    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Ethertype                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   https://en.wikipedia.org/wiki/EtherType

   The main subtlety here is dealing with the optional 802.1Q tag.

   If the two octets following the source MAC address are 0x8100
   then we have an 802.1Q tag and VLAN tag info.
   
   Otherwise, those two octets following the source MAC represent the
   EtherType.

   This is specific to vxlan, since we do NOT attempt to identify the
   payload following the Ethertype and the CRC that follows it---these
   would be present in a standard Ethernet frame.

*/   

/*++ 
  A MAC_ADDRESS is just 6 octets
  --*/
typedef struct _MAC_ADDRESS
{
  UINT8 Address[6];
} MAC_ADDRESS;

/*++ The constant signaling the 802.1Q tag --*/
#define DOT1Q_TYPE 0x8100

/*++
  In case the 802.1Q tag is set, then what follows it is this
  type, a pair of a VlanTag and an EtherType, both two octets.
  --*/
typedef struct _VLAN_ETHTYPE
{
  UINT16BE VlanTag;
  UINT16BE EthType;
} VLAN_ETHTYPE;

/*++
  In case EthTypeOrDot1Q signals the presence of an 802.1Q
  tag, then we must have a VLAN_ETHTYPE following it.

  Otherwise, we have reached the end of the header and can set the
  EthTypeOut to the EthTypeOrDot1Q value.
  --*/
casetype _VLAN_ETHTYPE_OR_EMPTY (UINT16 EthTypeOrDot1Q)
{
  switch(EthTypeOrDot1Q)
  {
     case DOT1Q_TYPE:
       VLAN_ETHTYPE VlanEthType;

     default:
       unit Empty;
  }
} VLAN_ETHTYPE_OR_EMPTY;

/*++
  The top-level validator for an Ethernet frame

  After successful validation, it is safe to cast the input buffer to

  struct MacAddresses {
    UINT8 Destination[6];
    UINT8 Source[6];
  }

  Fot the remaining fields, due to the optional 802.1Q, they should be
  accessed through the out parameters described below.

  Out parameters:

    - Dot1QOut: This flag is set in case the 802.1Q tag is set

    - VlanTagOut: This is set to the content of the Outer.VLAN Tag
      Information, in case it is present.

    - EthTypeOut: This is always set to the EtherType field

    - EndOfHeaderOut: This is set to point to the input buffer
      immediately after the Ethertype field. A client can use this
      pointer to continue to process the next level headers.
 --*/
entrypoint
typedef struct _ETHERNET_FRAME
{
  MAC_ADDRESS Destination;
  MAC_ADDRESS Source;
  UINT16BE EthTypeOrDot1Q;
  VLAN_ETHTYPE_OR_EMPTY(EthTypeOrDot1Q) VlanEthType;
  unit EndOfHeader;
} ETHERNET_FRAME;

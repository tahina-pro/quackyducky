//
// ICMP Messages from RFC 792
//

#define DESTINATION_UNREACHABLE_TYPE    3
#define TIME_EXCEEDED_TYPE              11
#define PARAMETER_PROBLEM_TYPE          12
#define SOURCE_QUENCH_TYPE              4
#define REDIRECT_TYPE                   5
#define ECHO_TYPE                       8
#define ECHO_REPLY_TYPE                 0
#define TIMESTAMP_TYPE                  13
#define TIMESTAMP_REPLY_TYPE            14
#define INFORMATION_REQUEST_TYPE        15
#define INFORMATION_REPLY_TYPE          16

UINT8 enum DESTINATION_UNREACHABLE_CODE
{
    NET_UNREACHABLE = 0,
    HOST_UNREACHABLE,
    PROTOCOL_UNREACHABLE,
    PORT_UNREACHABLE,
    FRAGMENT_NEEDED_AND_DF_SET,
    SOURCE_ROUTE_FAILED
}

typedef struct _IP_HEADER_AND_DATAGRAM
{
    IPV4::IPV4_HEADER    IpHeader;
    UINT64BE             IpData;
} IP_HEADER_AND_DATAGRAM;


typedef struct _ZeroByte
{
    UINT8 zero { zero == 0 };
} ZeroByte;


typedef struct _UNUSED_BYTES32
{
    ZeroByte    b1;
    ZeroByte    b2;
    ZeroByte    b3;
    ZeroByte    b4;
} UNUSED_BYTES32;

typedef struct _UNUSED_BYTES24
{
    ZeroByte    b1;
    ZeroByte    b2;
    ZeroByte    b3;
} UNUSED_BYTES24;
    

typedef struct _DESTINATION_UNREACHABLE_MESSAGE
{
     DESTINATION_UNREACHABLE_CODE        Code;
     UINT16BE                            Checksum;
     UNUSED_BYTES32                      Unused;
     IP_HEADER_AND_DATAGRAM              OriginalMsg;
} DESTINATION_UNREACHABLE_MESSAGE;


UINT8 enum TIME_EXCEEDED_CODE
{
    TTL_EXCEEDED_IN_TRANSIT = 0,
    FRAGMENT_REASSEMBLY_TIME_EXCEEDED
}


typedef struct _TIME_EXCEEDED_MESSAGE
{
    TIME_EXCEEDED_CODE        Code;
    UINT16BE                  Checksum;
    UNUSED_BYTES32            Unused;
    IP_HEADER_AND_DATAGRAM    OriginalMsg;
} TIME_EXCEEDED_MESSAGE;


typedef struct _PARAMETER_PROBLEM_MESSAGE
{
    UINT8                     Code
    {
        Code == 0
    };
    UINT16BE                  Checksum;
    UINT8                     Pointer;  //Valid only if code is 0, is there something to check?
    UNUSED_BYTES24            Unused;
    IP_HEADER_AND_DATAGRAM    OriginalMsg;
} PARAMETER_PROBLEM_MESSAGE;


typedef struct _SOURCE_QUENCH_MESSAGE
{
    UINT8                     Code
    {
        Code == 0
    };
    UINT16BE                  Checksum;
    UNUSED_BYTES32            Unused;
    IP_HEADER_AND_DATAGRAM    OriginalMsg;
} SOURCE_QUENCH_MESSAGE;


UINT8 enum REDIRECT_CODE
{
    FOR_NETWORK = 0,
    FOR_HOST,
    FOR_ToS_AND_NETWORK,
    FOR_ToS_AND_HOST
}

typedef struct _REDIRECT_MESSAGE
{
    REDIRECT_CODE             Code;
    UINT16BE                  Checksum;
    UINT32BE                  GatewayInternetAddress;
    IP_HEADER_AND_DATAGRAM    OriginalMsg;
} REDIRECT_MESSAGE;


typedef struct _ECHO_OR_ECHO_REPLY_MESSAGE
{
    UINT8                     Code
    {
        Code == 0
    };
    UINT16BE                  Checksum;
    UINT16BE                  Identifier;
    UINT16BE                  SequenceNumber;
    UINT8                     Data[:consume-all];  //TODO: get an opinion on this
} ECHO_OR_ECHO_REPLY_MESSAGE;


typedef struct _TIMESTAMP_OR_TIMESTAMP_REPLY_MESSAGE
{
    UINT8                     Code
    {
        Code == 0
    };
    UINT16BE                  Checksum;
    UINT16BE                  Identifier;
    UINT16BE                  SequenceNumber;
    UINT32BE                  OriginalTimeStamp;
    UINT32BE                  ReceiveTimeStamp;
    UINT32BE                  TransmitTimeStamp;
} TIMESTAMP_OR_TIMESTAMP_REPLY_MESSAGE;


typedef struct _INFORMATION_REQUEST_OR_INFORMATION_REPLY_MESSAGE
{
    UINT8                     Code
    {
        Code == 0
    };
    UINT16BE                  Checksum;
    UINT16BE                  Identifier;
    UINT16BE                  SequenceNumber;
} INFORMATION_REQUEST_OR_INFORMATION_REPLY_MESSAGE;
    

casetype _ICMP_DATAGRAM_PAYLOAD(UINT8 Type)
{
    switch(Type)
    {
        case DESTINATION_UNREACHABLE_TYPE:
            DESTINATION_UNREACHABLE_MESSAGE                         DestinationUnreachableMessage;
        case TIME_EXCEEDED_TYPE:
            TIME_EXCEEDED_MESSAGE                                   TimeExceededMessage;
        case PARAMETER_PROBLEM_TYPE:
            PARAMETER_PROBLEM_MESSAGE                               ParameterProblemMessage;
        case SOURCE_QUENCH_TYPE:
            SOURCE_QUENCH_MESSAGE                                   SourceQuenchMessage;
        case REDIRECT_TYPE:
            REDIRECT_MESSAGE                                        RedirectMessage;
        case ECHO_TYPE:
            ECHO_OR_ECHO_REPLY_MESSAGE                         EchoMessage;
        case ECHO_REPLY_TYPE:
            ECHO_OR_ECHO_REPLY_MESSAGE                         EchoReplyMessage;
        case TIMESTAMP_TYPE:
            TIMESTAMP_OR_TIMESTAMP_REPLY_MESSAGE                    TimestampMessage;
        case TIMESTAMP_REPLY_TYPE:
            TIMESTAMP_OR_TIMESTAMP_REPLY_MESSAGE                    TimestampReplyMessage;
        case INFORMATION_REQUEST_TYPE:
            INFORMATION_REQUEST_OR_INFORMATION_REPLY_MESSAGE        InformationRequestMessage;
        case INFORMATION_REPLY_TYPE:
            INFORMATION_REQUEST_OR_INFORMATION_REPLY_MESSAGE        InformationReplyMessage;
      }
} ICMP_DATAGRAM_PAYLOAD;


export
typedef struct _ICMP_DATAGRAM
{
    UINT8                               Type;

    ICMP_DATAGRAM_PAYLOAD(Type)    Payload;
} ICMP_DATAGRAM;

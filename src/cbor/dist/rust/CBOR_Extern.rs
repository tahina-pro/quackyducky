/* automatically generated by rust-bindgen 0.69.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CBOR_CBOR_Case_Int64: u32 = 0;
pub const CBOR_CBOR_Case_String: u32 = 1;
pub const CBOR_CBOR_Case_Tagged: u32 = 2;
pub const CBOR_CBOR_Case_Array: u32 = 3;
pub const CBOR_CBOR_Case_Map: u32 = 4;
pub const CBOR_CBOR_Case_Simple_value: u32 = 5;
pub const CBOR_CBOR_Case_Serialized: u32 = 6;
pub const CBOR_MAJOR_TYPE_SIMPLE_VALUE: u32 = 7;
pub const CBOR_MAJOR_TYPE_UINT64: u32 = 0;
pub const CBOR_MAJOR_TYPE_NEG_INT64: u32 = 1;
pub const CBOR_MAJOR_TYPE_BYTE_STRING: u32 = 2;
pub const CBOR_MAJOR_TYPE_TEXT_STRING: u32 = 3;
pub const CBOR_MAJOR_TYPE_ARRAY: u32 = 4;
pub const CBOR_MAJOR_TYPE_MAP: u32 = 5;
pub const CBOR_MAJOR_TYPE_TAGGED: u32 = 6;
pub const CBOR_CBOR_Array_Iterator_Payload_Array: u32 = 0;
pub const CBOR_CBOR_Array_Iterator_Payload_Serialized: u32 = 1;
pub const CBOR_CBOR_Map_Iterator_Payload_Map: u32 = 0;
pub const CBOR_CBOR_Map_Iterator_Payload_Serialized: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_int_s {
    pub cbor_int_type: u8,
    pub cbor_int_value: u64,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_int_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_int_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_int_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_int_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_int_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_int_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_int_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_int_s),
            "::",
            stringify!(cbor_int_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_int_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_int_s),
            "::",
            stringify!(cbor_int_value)
        )
    );
}
pub type CBOR_cbor_int = CBOR_cbor_int_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_string_s {
    pub cbor_string_type: u8,
    pub cbor_string_length: u64,
    pub cbor_string_payload: *mut u8,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_string_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_string_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_string_s>(),
        24usize,
        concat!("Size of: ", stringify!(CBOR_cbor_string_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_string_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_string_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_string_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_string_s),
            "::",
            stringify!(cbor_string_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_string_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_string_s),
            "::",
            stringify!(cbor_string_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_string_payload) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_string_s),
            "::",
            stringify!(cbor_string_payload)
        )
    );
}
pub type CBOR_cbor_string = CBOR_cbor_string_s;
pub type CBOR_cbor = CBOR_cbor_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_tagged0_s {
    pub cbor_tagged0_tag: u64,
    pub cbor_tagged0_payload: *mut CBOR_cbor,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_tagged0_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_tagged0_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_tagged0_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_tagged0_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_tagged0_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_tagged0_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_tagged0_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_tagged0_s),
            "::",
            stringify!(cbor_tagged0_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_tagged0_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_tagged0_s),
            "::",
            stringify!(cbor_tagged0_payload)
        )
    );
}
pub type CBOR_cbor_tagged0 = CBOR_cbor_tagged0_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_array_s {
    pub cbor_array_length: u64,
    pub cbor_array_payload: *mut CBOR_cbor,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_array_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_s),
            "::",
            stringify!(cbor_array_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_array_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_s),
            "::",
            stringify!(cbor_array_payload)
        )
    );
}
pub type CBOR_cbor_array = CBOR_cbor_array_s;
pub type CBOR_cbor_map_entry = CBOR_cbor_map_entry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_map_s {
    pub cbor_map_length: u64,
    pub cbor_map_payload: *mut CBOR_cbor_map_entry,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_map_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_map_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_map_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_map_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_map_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_map_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_s),
            "::",
            stringify!(cbor_map_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_s),
            "::",
            stringify!(cbor_map_payload)
        )
    );
}
pub type CBOR_cbor_map = CBOR_cbor_map_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBOR_cbor_serialized_s {
    pub cbor_serialized_size: usize,
    pub cbor_serialized_payload: *mut u8,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_serialized_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_serialized_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_serialized_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_serialized_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_serialized_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_serialized_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_serialized_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_serialized_s),
            "::",
            stringify!(cbor_serialized_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_serialized_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_serialized_s),
            "::",
            stringify!(cbor_serialized_payload)
        )
    );
}
pub type CBOR_cbor_serialized = CBOR_cbor_serialized_s;
pub type CBOR_cbor_tags = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_s {
    pub tag: CBOR_cbor_tags,
    pub __bindgen_anon_1: CBOR_cbor_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CBOR_cbor_s__bindgen_ty_1 {
    pub case_CBOR_Case_Int64: CBOR_cbor_int,
    pub case_CBOR_Case_String: CBOR_cbor_string,
    pub case_CBOR_Case_Tagged: CBOR_cbor_tagged0,
    pub case_CBOR_Case_Array: CBOR_cbor_array,
    pub case_CBOR_Case_Map: CBOR_cbor_map,
    pub case_CBOR_Case_Simple_value: u8,
    pub case_CBOR_Case_Serialized: CBOR_cbor_serialized,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_s__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(CBOR_cbor_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_String) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_String)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Tagged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Tagged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Simple_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Simple_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).case_CBOR_Case_Serialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Case_Serialized)
        )
    );
}
#[test]
fn bindgen_test_layout_CBOR_cbor_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_s>(),
        32usize,
        concat!("Size of: ", stringify!(CBOR_cbor_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_s),
            "::",
            stringify!(tag)
        )
    );
}
extern "C" {
    pub fn CBOR_cbor_get_major_type(a: CBOR_cbor) -> u8;
}
extern "C" {
    pub fn CBOR_write_cbor(c: CBOR_cbor, out: *mut u8, sz: usize) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_map_entry_s {
    pub cbor_map_entry_key: CBOR_cbor,
    pub cbor_map_entry_value: CBOR_cbor,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_map_entry_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_map_entry_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_map_entry_s>(),
        64usize,
        concat!("Size of: ", stringify!(CBOR_cbor_map_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_map_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_map_entry_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_entry_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_entry_s),
            "::",
            stringify!(cbor_map_entry_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_entry_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_entry_s),
            "::",
            stringify!(cbor_map_entry_value)
        )
    );
}
pub type CBOR_cbor_array_iterator_payload_t_tags = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_array_iterator_payload_t_s {
    pub tag: CBOR_cbor_array_iterator_payload_t_tags,
    pub __bindgen_anon_1: CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1 {
    pub case_CBOR_Array_Iterator_Payload_Array: *mut CBOR_cbor,
    pub case_CBOR_Array_Iterator_Payload_Serialized: *mut u8,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).case_CBOR_Array_Iterator_Payload_Array) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Array_Iterator_Payload_Array)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).case_CBOR_Array_Iterator_Payload_Serialized) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Array_Iterator_Payload_Serialized)
        )
    );
}
#[test]
fn bindgen_test_layout_CBOR_cbor_array_iterator_payload_t_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_array_iterator_payload_t_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_array_iterator_payload_t_s>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_array_iterator_payload_t_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_iterator_payload_t_s),
            "::",
            stringify!(tag)
        )
    );
}
pub type CBOR_cbor_array_iterator_payload_t = CBOR_cbor_array_iterator_payload_t_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_array_iterator_t_s {
    pub cbor_array_iterator_length: u64,
    pub cbor_array_iterator_payload: CBOR_cbor_array_iterator_payload_t,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_array_iterator_t_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_array_iterator_t_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_array_iterator_t_s>(),
        24usize,
        concat!("Size of: ", stringify!(CBOR_cbor_array_iterator_t_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_array_iterator_t_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_array_iterator_t_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_array_iterator_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_iterator_t_s),
            "::",
            stringify!(cbor_array_iterator_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_array_iterator_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_array_iterator_t_s),
            "::",
            stringify!(cbor_array_iterator_payload)
        )
    );
}
pub type CBOR_cbor_array_iterator_t = CBOR_cbor_array_iterator_t_s;
pub type CBOR_cbor_map_iterator_payload_t_tags = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_map_iterator_payload_t_s {
    pub tag: CBOR_cbor_map_iterator_payload_t_tags,
    pub __bindgen_anon_1: CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1 {
    pub case_CBOR_Map_Iterator_Payload_Map: *mut CBOR_cbor_map_entry,
    pub case_CBOR_Map_Iterator_Payload_Serialized: *mut u8,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).case_CBOR_Map_Iterator_Payload_Map) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Map_Iterator_Payload_Map)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).case_CBOR_Map_Iterator_Payload_Serialized) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s__bindgen_ty_1),
            "::",
            stringify!(case_CBOR_Map_Iterator_Payload_Serialized)
        )
    );
}
#[test]
fn bindgen_test_layout_CBOR_cbor_map_iterator_payload_t_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_map_iterator_payload_t_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_map_iterator_payload_t_s>(),
        16usize,
        concat!("Size of: ", stringify!(CBOR_cbor_map_iterator_payload_t_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_map_iterator_payload_t_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_iterator_payload_t_s),
            "::",
            stringify!(tag)
        )
    );
}
pub type CBOR_cbor_map_iterator_payload_t = CBOR_cbor_map_iterator_payload_t_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_map_iterator_t_s {
    pub cbor_map_iterator_length: u64,
    pub cbor_map_iterator_payload: CBOR_cbor_map_iterator_payload_t,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_map_iterator_t_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_map_iterator_t_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_map_iterator_t_s>(),
        24usize,
        concat!("Size of: ", stringify!(CBOR_cbor_map_iterator_t_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_map_iterator_t_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_map_iterator_t_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_iterator_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_iterator_t_s),
            "::",
            stringify!(cbor_map_iterator_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_map_iterator_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_map_iterator_t_s),
            "::",
            stringify!(cbor_map_iterator_payload)
        )
    );
}
pub type CBOR_cbor_map_iterator_t = CBOR_cbor_map_iterator_t_s;
extern "C" {
    pub static mut CBOR_dummy_cbor: CBOR_cbor;
}
extern "C" {
    pub fn CBOR_cbor_map_entry_key(uu___: CBOR_cbor_map_entry) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_cbor_map_entry_value(uu___: CBOR_cbor_map_entry) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_mk_cbor_map_entry(key: CBOR_cbor, value: CBOR_cbor) -> CBOR_cbor_map_entry;
}
extern "C" {
    pub fn CBOR_cbor_compare_aux(c1: CBOR_cbor, c2: CBOR_cbor) -> i16;
}
extern "C" {
    pub fn CBOR_constr_cbor_array(a: *mut CBOR_cbor, len: u64) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_cbor_array_length(a: CBOR_cbor) -> u64;
}
extern "C" {
    pub fn CBOR_cbor_array_index(a: CBOR_cbor, i: usize) -> CBOR_cbor;
}
extern "C" {
    pub static mut CBOR_dummy_cbor_array_iterator: CBOR_cbor_array_iterator_t;
}
extern "C" {
    pub fn CBOR_cbor_array_iterator_init(a: CBOR_cbor) -> CBOR_cbor_array_iterator_t;
}
extern "C" {
    pub fn CBOR_cbor_array_iterator_is_done(i: CBOR_cbor_array_iterator_t) -> bool;
}
extern "C" {
    pub fn CBOR_cbor_array_iterator_next(pi: *mut CBOR_cbor_array_iterator_t) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_read_cbor_array(a: CBOR_cbor, dest: *mut CBOR_cbor, len: u64) -> *mut CBOR_cbor;
}
extern "C" {
    pub fn CBOR_destr_cbor_string(c: CBOR_cbor) -> CBOR_cbor_string;
}
extern "C" {
    pub fn CBOR_constr_cbor_string(typ: u8, a: *mut u8, len: u64) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_destr_cbor_simple_value(c: CBOR_cbor) -> u8;
}
extern "C" {
    pub fn CBOR_constr_cbor_simple_value(value: u8) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_destr_cbor_int64(c: CBOR_cbor) -> CBOR_cbor_int;
}
extern "C" {
    pub fn CBOR_constr_cbor_int64(ty: u8, value: u64) -> CBOR_cbor;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_cbor_tagged_s {
    pub cbor_tagged_tag: u64,
    pub cbor_tagged_payload: CBOR_cbor,
}
#[test]
fn bindgen_test_layout_CBOR_cbor_tagged_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_cbor_tagged_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_cbor_tagged_s>(),
        40usize,
        concat!("Size of: ", stringify!(CBOR_cbor_tagged_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_cbor_tagged_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_cbor_tagged_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_tagged_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_tagged_s),
            "::",
            stringify!(cbor_tagged_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbor_tagged_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_cbor_tagged_s),
            "::",
            stringify!(cbor_tagged_payload)
        )
    );
}
pub type CBOR_cbor_tagged = CBOR_cbor_tagged_s;
extern "C" {
    pub fn CBOR_destr_cbor_tagged(a: CBOR_cbor) -> CBOR_cbor_tagged;
}
extern "C" {
    pub fn CBOR_constr_cbor_tagged(tag: u64, a: *mut CBOR_cbor) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_cbor_map_length(a: CBOR_cbor) -> u64;
}
extern "C" {
    pub static mut CBOR_dummy_cbor_map_iterator: CBOR_cbor_map_iterator_t;
}
extern "C" {
    pub fn CBOR_constr_cbor_map(a: *mut CBOR_cbor_map_entry, len: u64) -> CBOR_cbor;
}
extern "C" {
    pub fn CBOR_cbor_map_iterator_init(a: CBOR_cbor) -> CBOR_cbor_map_iterator_t;
}
extern "C" {
    pub fn CBOR_cbor_map_iterator_is_done(i: CBOR_cbor_map_iterator_t) -> bool;
}
extern "C" {
    pub fn CBOR_cbor_map_iterator_next(pi: *mut CBOR_cbor_map_iterator_t) -> CBOR_cbor_map_entry;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CBOR_read_cbor_t_s {
    pub read_cbor_is_success: bool,
    pub read_cbor_payload: CBOR_cbor,
    pub read_cbor_remainder: *mut u8,
    pub read_cbor_remainder_length: usize,
}
#[test]
fn bindgen_test_layout_CBOR_read_cbor_t_s() {
    const UNINIT: ::std::mem::MaybeUninit<CBOR_read_cbor_t_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBOR_read_cbor_t_s>(),
        56usize,
        concat!("Size of: ", stringify!(CBOR_read_cbor_t_s))
    );
    assert_eq!(
        ::std::mem::align_of::<CBOR_read_cbor_t_s>(),
        8usize,
        concat!("Alignment of ", stringify!(CBOR_read_cbor_t_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cbor_is_success) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_read_cbor_t_s),
            "::",
            stringify!(read_cbor_is_success)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cbor_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_read_cbor_t_s),
            "::",
            stringify!(read_cbor_payload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cbor_remainder) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_read_cbor_t_s),
            "::",
            stringify!(read_cbor_remainder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cbor_remainder_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CBOR_read_cbor_t_s),
            "::",
            stringify!(read_cbor_remainder_length)
        )
    );
}
pub type CBOR_read_cbor_t = CBOR_read_cbor_t_s;
extern "C" {
    pub fn CBOR_read_cbor(a: *mut u8, sz: usize) -> CBOR_read_cbor_t;
}
extern "C" {
    pub fn CBOR_read_deterministically_encoded_cbor(a: *mut u8, sz: usize) -> CBOR_read_cbor_t;
}

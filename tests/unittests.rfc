opaque t1<0..255>;
t1 t2<0..255>;
opaque t3[2];
t3 t4[8];
t3 t5<0..255>;

enum { a, b, (255) } tag;

struct {
  tag t;
  select(t) {
   case a: t3;
   case b: t4;
  } body;
} t6;

enum /*@open*/ {
x, y, z, t, v, w, (255)
} tag2;

struct {
  tag2 t;
  select(t) {
    case x: t3;
    case y: t4;
    case w: Empty;
    default: t2;
  } body;
} t7;

struct {
  t4 x;
  t5 y;
  t1 z<0..255>;
  uint16 x1;
  uint16 x2;
  uint16 x3;
  uint16 x4;
  uint16 x5;
  uint16 x6;
  uint32 x7;
} t8;

struct {
  t1 a;
  uint16 l;
  t5 b[l];
} t9;

struct {
  t3 simplify;
} t10;

struct {
  uint8 u;
  t1 z<0..255>;
} t11;

struct {
  uint8 u;
  t1 z[18];
} t12;

struct {
  uint8 u;
  opaque x<0..255>;
  uint16 y;
} T13;

struct {
  uint8 u;
  opaque x[18];
  uint16 y;
} t14;

struct {
  t1 start;
  tag2 t;
  select(t) {
    case x: uint16;
    case y: uint32;
    case w: Empty;
    default: Fail;
  } body;
} t15;

struct {
  uint16 len;
  tag t;
  select(t)
  {
    case a: Empty;
    case b: T13;
  } x;
} t16;

struct {
  tag t;
  uint16 len;
  select(t)
  {
    case a: Empty;
    case b: T13;
  } x[len];
} t17;

struct {
  tag t;
  uint8 len;
  select(t)
  {
    case a: Fail;
    case b: T13;
  } x[len];
} t18;

struct {
  /*@implicit*/ tag t;
  select(t)
  {
    case a: Fail;
    case b: T13;
  } x;
} t19;

struct {
  /*@implicit*/ tag2 t;
  select(t)
  {
    case x: Fail;
    case y: t4;
    default: uint16;
  } x;
} t20;

/*
 Types constructed from implicit sums will
 cause QD to stage the parsing using vlbytes
*/
struct {
  uint16 len;
  t20 x[len];
} t21;

struct {
  tag t;
  uint24 len;
  select(t)
  {
    case a: t19;
    case b: t20;
  } body[len];
} t22;

struct {
  uint8 len;
  t18 data[len];
} t23;

struct {
  bitcoin_varint x;
  uint16_le y{12..32 : bitcoin_varint};
} t24;

struct {
  asn1_len len;
  t24 payload[len];
  uint16 blen;
  opaque bpayload[blen];
} t25;

struct {
  asn1_len8 len;
  t25 payload[len];
} t26;

struct {
  opaque tag[3];
  (if tag = "000000" uint32 else t3) value;
} t27;

struct {} t28;

opaque t29<0..100000 : uint24>;
